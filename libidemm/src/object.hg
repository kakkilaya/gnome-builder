/* object.hg
 *
 * Copyright (C) 2016 Marcin Kolny <marcin.kolny@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <glibmm/object.h>
#include <giomm/asyncresult.h>

#include <ide.h>

_DEFS(idemm, libide)
_PINCLUDE(glibmm/private/object_p.h)

namespace Ide {

class Object : public Glib::Object
{
protected:
  _CLASS_GOBJECT(Object, IdeObject, IDE_OBJECT, Glib::Object, GObject)

public:
  static Glib::RefPtr<Ide::Object> create_finish(const Glib::RefPtr<Gio::AsyncResult>& result);

  _WRAP_METHOD(bool hold(), ide_object_hold)
  _WRAP_METHOD(void release(), ide_object_release)
  _WRAP_METHOD(void notify_in_main(GParamSpec *pspec), ide_object_notify_in_main)

  _WRAP_SIGNAL(void destroy(), "destroy")
};

}
